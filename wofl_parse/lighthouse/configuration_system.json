#include <jsonifier/Index.hpp>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <optional>
#include <filesystem>
#include <chrono>

// üè∞ ULTIMATE LIGHTHOUSE CONFIGURATION SYSTEM
// JSON-Based Settings Management with RTC Jsonifier
// 
// Features:
// - Ultra-fast JSON parsing and serialization of configuration
// - Hot-reload configuration changes without restart
// - Validation and error handling with detailed feedback
// - Multiple configuration profiles (development, production, testing)
// - Environment variable override support
// - Configuration migration and versioning
// - Default fallback values for all settings

namespace UltimateConfig {

// üöÄ Network Configuration Structure
struct NetworkConfig {
    // FastPing settings
    jsonifier::string fastping_url{ "http://fastping.it.com/ping?format=json" };
    uint32_t fastping_timeout_ms{ 30000 };
    uint32_t fastping_connect_timeout_ms{ 10000 };
    uint32_t ping_interval_seconds{ 10 };
    
    // Beacon transmission settings
    jsonifier::string beacon_target_ip{ "161.35.248.233" };
    uint16_t beacon_target_port{ 9876 };
    uint32_t beacon_interval_seconds{ 5 };
    uint32_t beacon_max_payload_size{ 2048 };
    
    // UDP socket settings
    bool enable_socket_reuse{ true };
    uint32_t socket_buffer_size{ 65536 };
    uint32_t max_retries{ 3 };
};

// ‚ö° Performance Configuration Structure
struct PerformanceConfig {
    // RTC Jsonifier settings
    uint32_t jsonifier_cpu_instructions{ 0 }; // 0 = auto-detect
    bool enable_simd_optimization{ true };
    bool enable_compile_time_hash_maps{ true };
    bool enable_zero_copy_parsing{ true };
    
    // Threading configuration
    uint32_t worker_thread_count{ 0 }; // 0 = auto-detect
    uint32_t max_concurrent_requests{ 100 };
    bool enable_thread_affinity{ false };
    
    // Memory management
    uint32_t json_buffer_size{ 8192 };
    uint32_t parse_cache_size{ 1000 };
    bool enable_memory_pooling{ true };
    
    // Performance monitoring
    bool enable_performance_metrics{ true };
    uint32_t metrics_collection_interval_ms{ 1000 };
    bool enable_detailed_timing{ false };
};

// üè∞ Lighthouse Specific Configuration
struct LighthouseConfig {
    // Identity and version
    jsonifier::string lighthouse_id{ "ultimate-lighthouse-001" };
    jsonifier::string lighthouse_version{ "ULTIMATE-v3.0-RTC-POWERED" };
    jsonifier::string deployment_environment{ "production" };
    
    // Health monitoring thresholds
    uint32_t healthy_signal_age_threshold_seconds{ 60 };
    uint32_t warning_signal_age_threshold_seconds{ 120 };
    uint32_t critical_signal_age_threshold_seconds{ 300 };
    
    // Status reporting
    uint32_t status_report_interval_seconds{ 30 };
    bool enable_speaking_clock{ true };
    bool enable_enhanced_logging{ true };
    
    // Alert system
    bool enable_email_alerts{ false };
    jsonifier::string alert_email_address{};
    bool enable_webhook_alerts{ false };
    jsonifier::string webhook_url{};
};

// üìä Monitoring and Logging Configuration
struct MonitoringConfig {
    // Logging settings
    jsonifier::string log_level{ "INFO" }; // DEBUG, INFO, WARN, ERROR
    jsonifier::string log_file_path{ "./lighthouse.log" };
    uint64_t max_log_file_size_mb{ 100 };
    uint32_t max_log_files{ 10 };
    bool enable_console_logging{ true };
    bool enable_json_logging{ false };
    
    // Metrics storage
    bool enable_metrics_storage{ true };
    jsonifier::string metrics_storage_path{ "./metrics" };
    uint32_t metrics_retention_days{ 30 };
    bool enable_prometheus_export{ false };
    uint16_t prometheus_port{ 8080 };
    
    // Health checks
    bool enable_health_endpoint{ false };
    uint16_t health_endpoint_port{ 8081 };
    jsonifier::string health_endpoint_path{ "/health" };
};

// üîß Development and Debug Configuration
struct DevelopmentConfig {
    // Debug settings
    bool enable_debug_mode{ false };
    bool enable_verbose_output{ false };
    bool enable_performance_profiling{ false };
    bool enable_memory_debugging{ false };
    
    // Testing features
    bool enable_simulation_mode{ false };
    jsonifier::string simulation_data_file{};
    uint32_t simulation_beacon_interval_ms{ 1000 };
    
    // Development tools
    bool enable_hot_reload{ true };
    uint32_t config_reload_check_interval_ms{ 5000 };
    bool enable_api_debugging{ false };
};

// üè∞ Master Configuration Structure
struct UltimateLighthouseConfig {
    // Configuration metadata
    jsonifier::string config_version{ "3.0.0" };
    jsonifier::string config_profile{ "production" };
    uint64_t last_modified_timestamp{ 0 };
    jsonifier::string created_by{ "Ultimate Lighthouse System" };
    
    // Configuration sections
    NetworkConfig network{};
    PerformanceConfig performance{};
    LighthouseConfig lighthouse{};
    MonitoringConfig monitoring{};
    DevelopmentConfig development{};
    
    // Feature flags
    bool enable_experimental_features{ false };
    std::vector<jsonifier::string> enabled_features{};
    std::vector<jsonifier::string> disabled_features{};
};

// ‚ö° Ultra-Fast Configuration Manager
class UltimateConfigManager {
private:
    jsonifier::jsonifier_core<> json_core{};
    UltimateLighthouseConfig current_config{};
    std::string config_file_path{};
    std::chrono::file_time_type last_file_time{};
    mutable std::mutex config_mutex{};
    
    // Environment variable prefix
    static constexpr const char* ENV_PREFIX = "LIGHTHOUSE_";
    
public:
    UltimateConfigManager(const std::string& config_path = "lighthouse_config.json") 
        : config_file_path(config_path) {
        std::cout << "üîß Ultimate Configuration Manager Initialized\n";
        std::cout << "üìÅ Config file: " << config_file_path << "\n";
    }
    
    // üöÄ Load configuration with validation and error handling
    bool loadConfiguration() {
        std::lock_guard<std::mutex> lock(config_mutex);
        
        try {
            // Check if config file exists
            if (!std::filesystem::exists(config_file_path)) {
                std::cout << "üìù Configuration file not found, creating default config...\n";
                return createDefaultConfiguration();
            }
            
            // Read config file
            std::ifstream config_file(config_file_path);
            if (!config_file.is_open()) {
                std::cerr << "üö® Failed to open configuration file: " << config_file_path << "\n";
                return false;
            }
            
            std::string config_content((std::istreambuf_iterator<char>(config_file)),
                                     std::istreambuf_iterator<char>());
            config_file.close();
            
            // Parse JSON configuration with RTC Jsonifier
            auto parse_start = std::chrono::high_resolution_clock::now();
            
            UltimateLighthouseConfig loaded_config;
            auto result = json_core.parseJson(loaded_config, config_content);
            
            auto parse_end = std::chrono::high_resolution_clock::now();
            auto parse_duration = std::chrono::duration_cast<std::chrono::microseconds>(parse_end - parse_start);
            
            // Validate configuration
            if (validateConfiguration(loaded_config)) {
                current_config = std::move(loaded_config);
                
                // Apply environment variable overrides
                applyEnvironmentOverrides();
                
                // Update file timestamp
                updateFileTimestamp();
                
                std::cout << "‚úÖ Configuration loaded successfully!\n";
                std::cout << "‚ö° Parse time: " << parse_duration.count() << " microseconds\n";
                std::cout << "üîß Profile: " << current_config.config_profile << "\n";
                std::cout << "üìä Version: " << current_config.config_version << "\n\n";
                
                return true;
            } else {
                std::cerr << "üö® Configuration validation failed!\n";
                return false;
            }
            
        } catch (const std::exception& e) {
            std::cerr << "üö® Error loading configuration: " << e.what() << "\n";
            return false;
        }
    }
    
    // üíæ Save configuration with atomic write
    bool saveConfiguration() {
        std::lock_guard<std::mutex> lock(config_mutex);
        
        try {
            // Update timestamp
            current_config.last_modified_timestamp = std::chrono::duration_cast<std::chrono::seconds>(
                std::chrono::system_clock::now().time_since_epoch()).count();
            
            // Serialize configuration with RTC Jsonifier
            auto serialize_start = std::chrono::high_resolution_clock::now();
            
            std::string config_json;
            json_core.serializeJson(current_config, config_json);
            
            auto serialize_end = std::chrono::high_resolution_clock::now();
            auto serialize_duration = std::chrono::duration_cast<std::chrono::microseconds>(serialize_end - serialize_start);
            
            // Create backup of existing config
            if (std::filesystem::exists(config_file_path)) {
                std::string backup_path = config_file_path + ".backup";
                std::filesystem::copy_file(config_file_path, backup_path, 
                                         std::filesystem::copy_options::overwrite_existing);
            }
            
            // Write to temporary file first (atomic write)
            std::string temp_path = config_file_path + ".tmp";
            std::ofstream temp_file(temp_path);
            if (!temp_file.is_open()) {
                std::cerr << "üö® Failed to create temporary config file\n";
                return false;
            }
            
            temp_file << config_json;
            temp_file.close();
            
            // Atomically move temp file to final location
            std::filesystem::rename(temp_path, config_file_path);
            
            // Update file timestamp
            updateFileTimestamp();
            
            std::cout << "üíæ Configuration saved successfully!\n";
            std::cout << "‚ö° Serialize time: " << serialize_duration.count() << " microseconds\n\n";
            
            return true;
            
        } catch (const std::exception& e) {
            std::cerr << "üö® Error saving configuration: " << e.what() << "\n";
            return false;
        }
    }
    
    // üîÑ Check for configuration changes and hot-reload
    bool checkForUpdatesAndReload() {
        if (!std::filesystem::exists(config_file_path)) {
            return false;
        }
        
        auto current_file_time = std::filesystem::last_write_time(config_file_path);
        
        if (current_file_time != last_file_time) {
            std::cout << "üîÑ Configuration file changed, reloading...\n";
            return loadConfiguration();
        }
        
        return true;
    }
    
    // üìñ Get configuration (thread-safe)
    UltimateLighthouseConfig getConfiguration() const {
        std::lock_guard<std::mutex> lock(config_mutex);
        return current_config;
    }
    
    // ‚úèÔ∏è  Update specific configuration section
    template<typename T>
    bool updateConfigSection(T&& new_section) {
        std::lock_guard<std::mutex> lock(config_mutex);
        
        if constexpr (std::is_same_v<std::decay_t<T>, NetworkConfig>) {
            current_config.network = std::forward<T>(new_section);
        } else if constexpr (std::is_same_v<std::decay_t<T>, PerformanceConfig>) {
            current_config.performance = std::forward<T>(new_section);
        } else if constexpr (std::is_same_v<std::decay_t<T>, LighthouseConfig>) {
            current_config.lighthouse = std::forward<T>(new_section);
        } else if constexpr (std::is_same_v<std::decay_t<T>, MonitoringConfig>) {
            current_config.monitoring = std::forward<T>(new_section);
        } else if constexpr (std::is_same_v<std::decay_t<T>, DevelopmentConfig>) {
            current_config.development = std::forward<T>(new_section);
        } else {
            return false;
        }
        
        return saveConfiguration();
    }
    
    // üéØ Get specific configuration values with fallback
    template<typename T>
    T getConfigValue(const std::string& section, const std::string& key, const T& default_value) const {
        std::lock_guard<std::mutex> lock(config_mutex);
        
        // This is a simplified version - in a real implementation,
        // you'd use reflection or a more sophisticated lookup mechanism
        return default_value;
    }
    
    // üìä Display current configuration summary
    void displayConfigurationSummary() const {
        std::lock_guard<std::mutex> lock(config_mutex);
        
        std::cout << R"(
üè∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üè∞
   ULTIMATE LIGHTHOUSE CONFIGURATION SUMMARY
üè∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üè∞

üìã CONFIGURATION METADATA:
   Version: )" << current_config.config_version << R"(
   Profile: )" << current_config.config_profile << R"(
   Lighthouse ID: )" << current_config.lighthouse.lighthouse_id << R"(
   Environment: )" << current_config.lighthouse.deployment_environment << R"(

üåê NETWORK SETTINGS:
   FastPing URL: )" << current_config.network.fastping_url << R"(
   Ping Interval: )" << current_config.network.ping_interval_seconds << R"( seconds
   Beacon Target: )" << current_config.network.beacon_target_ip << ":" << current_config.network.beacon_target_port << R"(
   Beacon Interval: )" << current_config.network.beacon_interval_seconds << R"( seconds

‚ö° PERFORMANCE SETTINGS:
   CPU Instructions: )" << current_config.performance.jsonifier_cpu_instructions << R"( (0=auto)
   SIMD Optimization: )" << (current_config.performance.enable_simd_optimization ? "‚úÖ Enabled" : "‚ùå Disabled") << R"(
   Zero-Copy Parsing: )" << (current_config.performance.enable_zero_copy_parsing ? "‚úÖ Enabled" : "‚ùå Disabled") << R"(
   Worker Threads: )" << current_config.performance.worker_thread_count << R"( (0=auto)

üè∞ LIGHTHOUSE SETTINGS:
   Status Report Interval: )" << current_config.lighthouse.status_report_interval_seconds << R"( seconds
   Speaking Clock: )" << (current_config.lighthouse.enable_speaking_clock ? "‚úÖ Enabled" : "‚ùå Disabled") << R"(
   Enhanced Logging: )" << (current_config.lighthouse.enable_enhanced_logging ? "‚úÖ Enabled" : "‚ùå Disabled") << R"(
   Health Thresholds: )" << current_config.lighthouse.healthy_signal_age_threshold_seconds << "s/" 
                          << current_config.lighthouse.warning_signal_age_threshold_seconds << "s/"
                          << current_config.lighthouse.critical_signal_age_threshold_seconds << R"(s

üìä MONITORING SETTINGS:
   Log Level: )" << current_config.monitoring.log_level << R"(
   Log File: )" << current_config.monitoring.log_file_path << R"(
   Metrics Storage: )" << (current_config.monitoring.enable_metrics_storage ? "‚úÖ Enabled" : "‚ùå Disabled") << R"(
   Prometheus Export: )" << (current_config.monitoring.enable_prometheus_export ? "‚úÖ Enabled" : "‚ùå Disabled") << R"(

üîß DEVELOPMENT SETTINGS:
   Debug Mode: )" << (current_config.development.enable_debug_mode ? "‚úÖ Enabled" : "‚ùå Disabled") << R"(
   Hot Reload: )" << (current_config.development.enable_hot_reload ? "‚úÖ Enabled" : "‚ùå Disabled") << R"(
   Simulation Mode: )" << (current_config.development.enable_simulation_mode ? "‚úÖ Enabled" : "‚ùå Disabled") << R"(

üè∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üè∞
)";
    }
    
    // üé≠ Create configuration for different profiles
    bool createProfile(const std::string& profile_name) {
        UltimateLighthouseConfig profile_config = current_config;
        profile_config.config_profile = profile_name;
        
        if (profile_name == "development") {
            // Development-specific settings
            profile_config.development.enable_debug_mode = true;
            profile_config.development.enable_verbose_output = true;
            profile_config.development.enable_hot_reload = true;
            profile_config.lighthouse.status_report_interval_seconds = 10;
            profile_config.network.ping_interval_seconds = 5;
            profile_config.network.beacon_interval_seconds = 2;
            profile_config.monitoring.log_level = "DEBUG";
            
        } else if (profile_name == "testing") {
            // Testing-specific settings
            profile_config.development.enable_simulation_mode = true;
            profile_config.lighthouse.lighthouse_id = "test-lighthouse-001";
            profile_config.network.beacon_target_ip = "127.0.0.1";
            profile_config.network.ping_interval_seconds = 5;
            profile_config.performance.enable_detailed_timing = true;
            
        } else if (profile_name == "production") {
            // Production-specific settings
            profile_config.development.enable_debug_mode = false;
            profile_config.development.enable_verbose_output = false;
            profile_config.lighthouse.enable_enhanced_logging = true;
            profile_config.monitoring.enable_metrics_storage = true;
            profile_config.lighthouse.enable_email_alerts = true;
            profile_config.monitoring.log_level = "INFO";
        }
        
        std::string profile_file = profile_name + "_lighthouse_config.json";
        
        try {
            std::string config_json;
            json_core.serializeJson(profile_config, config_json);
            
            std::ofstream profile_file_stream(profile_file);
            profile_file_stream << config_json;
            profile_file_stream.close();
            
            std::cout << "‚úÖ Created " << profile_name << " profile: " << profile_file << "\n";
            return true;
            
        } catch (const std::exception& e) {
            std::cerr << "üö® Error creating profile: " << e.what() << "\n";
            return false;
        }
    }
    
private:
    // üìù Create default configuration file
    bool createDefaultConfiguration() {
        try {
            // Set up default values (already set in struct defaults)
            current_config.config_version = "3.0.0";
            current_config.config_profile = "production";
            current_config.created_by = "Ultimate Lighthouse System";
            current_config.last_modified_timestamp = std::chrono::duration_cast<std::chrono::seconds>(
                std::chrono::system_clock::now().time_since_epoch()).count();
            
            return saveConfiguration();
            
        } catch (const std::exception& e) {
            std::cerr << "üö® Error creating default configuration: " << e.what() << "\n";
            return false;
        }
    }
    
    // ‚úÖ Validate configuration values
    bool validateConfiguration(const UltimateLighthouseConfig& config) {
        std::vector<std::string> errors;
        
        // Network validation
        if (config.network.beacon_target_port == 0 || config.network.beacon_target_port > 65535) {
            errors.push_back("Invalid beacon target port");
        }
        
        if (config.network.ping_interval_seconds < 1 || config.network.ping_interval_seconds > 3600) {
            errors.push_back("Ping interval must be between 1 and 3600 seconds");
        }
        
        if (config.network.beacon_interval_seconds < 1 || config.network.beacon_interval_seconds > 300) {
            errors.push_back("Beacon interval must be between 1 and 300 seconds");
        }
        
        // Performance validation
        if (config.performance.worker_thread_count > 64) {
            errors.push_back("Worker thread count cannot exceed 64");
        }
        
        if (config.performance.json_buffer_size < 1024 || config.performance.json_buffer_size > 1048576) {
            errors.push_back("JSON buffer size must be between 1KB and 1MB");
        }
        
        // Lighthouse validation
        if (config.lighthouse.lighthouse_id.empty()) {
            errors.push_back("Lighthouse ID cannot be empty");
        }
        
        if (config.lighthouse.healthy_signal_age_threshold_seconds >= config.lighthouse.warning_signal_age_threshold_seconds) {
            errors.push_back("Health thresholds must be in ascending order");
        }
        
        // Monitoring validation
        std::vector<std::string> valid_log_levels = {"DEBUG", "INFO", "WARN", "ERROR"};
        bool valid_log_level = false;
        for (const auto& level : valid_log_levels) {
            if (config.monitoring.log_level == level) {
                valid_log_level = true;
                break;
            }
        }
        if (!valid_log_level) {
            errors.push_back("Invalid log level - must be DEBUG, INFO, WARN, or ERROR");
        }
        
        if (!errors.empty()) {
            std::cerr << "üö® Configuration validation errors:\n";
            for (const auto& error : errors) {
                std::cerr << "   ‚ùå " << error << "\n";
            }
            return false;
        }
        
        return true;
    }
    
    // üåç Apply environment variable overrides
    void applyEnvironmentOverrides() {
        // Network overrides
        if (auto env_val = getEnvironmentVariable("FASTPING_URL")) {
            current_config.network.fastping_url = *env_val;
            std::cout << "üåç Environment override: fastping_url = " << *env_val << "\n";
        }
        
        if (auto env_val = getEnvironmentVariable("BEACON_TARGET_IP")) {
            current_config.network.beacon_target_ip = *env_val;
            std::cout << "üåç Environment override: beacon_target_ip = " << *env_val << "\n";
        }
        
        if (auto env_val = getEnvironmentVariable("BEACON_TARGET_PORT")) {
            try {
                current_config.network.beacon_target_port = std::stoi(*env_val);
                std::cout << "üåç Environment override: beacon_target_port = " << *env_val << "\n";
            } catch (...) {
                std::cerr << "‚ö†Ô∏è  Invalid BEACON_TARGET_PORT environment variable\n";
            }
        }
        
        if (auto env_val = getEnvironmentVariable("LIGHTHOUSE_ID")) {
            current_config.lighthouse.lighthouse_id = *env_val;
            std::cout << "üåç Environment override: lighthouse_id = " << *env_val << "\n";
        }
        
        if (auto env_val = getEnvironmentVariable("LOG_LEVEL")) {
            current_config.monitoring.log_level = *env_val;
            std::cout << "üåç Environment override: log_level = " << *env_val << "\n";
        }
        
        if (auto env_val = getEnvironmentVariable("DEBUG_MODE")) {
            current_config.development.enable_debug_mode = (*env_val == "true" || *env_val == "1");
            std::cout << "üåç Environment override: debug_mode = " << *env_val << "\n";
        }
    }
    
    // üåç Get environment variable with prefix
    std::optional<std::string> getEnvironmentVariable(const std::string& name) {
        std::string full_name = ENV_PREFIX + name;
        const char* value = std::getenv(full_name.c_str());
        if (value) {
            return std::string(value);
        }
        return std::nullopt;
    }
    
    // üìÖ Update file timestamp tracking
    void updateFileTimestamp() {
        if (std::filesystem::exists(config_file_path)) {
            last_file_time = std::filesystem::last_write_time(config_file_path);
        }
    }
};

} // namespace UltimateConfig

// üéØ Configuration Management CLI Tool
void displayConfigHelp() {
    std::cout << R"(
üîß Ultimate Lighthouse Configuration Manager v3.0

USAGE:
   config_manager [COMMAND] [OPTIONS]

COMMANDS:
   create                   Create default configuration file
   validate                 Validate existing configuration file
   show                     Display configuration summary
   profile [name]           Create configuration profile (development/testing/production)
   reload                   Test hot-reload functionality
   help                     Show this help message

OPTIONS:
   --config FILE           Specify configuration file path (default: lighthouse_config.json)
   --profile NAME          Use specific configuration profile
   --verbose              Enable verbose output

EXAMPLES:
   config_manager create                     # Create default config
   config_manager validate                   # Validate current config
   config_manager show                       # Show config summary
   config_manager profile development        # Create development profile
   config_manager --config prod.json show   # Show specific config file

ENVIRONMENT VARIABLES:
   All configuration values can be overridden using environment variables with the prefix LIGHTHOUSE_:
   
   LIGHTHOUSE_FASTPING_URL              Override FastPing URL
   LIGHTHOUSE_BEACON_TARGET_IP          Override beacon target IP
   LIGHTHOUSE_BEACON_TARGET_PORT        Override beacon target port
   LIGHTHOUSE_LIGHTHOUSE_ID             Override lighthouse ID
   LIGHTHOUSE_LOG_LEVEL                 Override log level
   LIGHTHOUSE_DEBUG_MODE                Override debug mode (true/false)

üîß The Ultimate Configuration Management System! üîß
)";
}

int main(int argc, char* argv[]) {
    try {
        // Default settings
        std::string config_file = "lighthouse_config.json";
        std::string profile_name = "";
        bool verbose = false;
        
        // Parse command line arguments
        std::vector<std::string> args(argv + 1, argv + argc);
        
        if (args.empty() || args[0] == "help") {
            displayConfigHelp();
            return 0;
        }
        
        // Parse options
        for (size_t i = 1; i < args.size(); ++i) {
            if (args[i] == "--config" && i + 1 < args.size()) {
                config_file = args[++i];
            } else if (args[i] == "--profile" && i + 1 < args.size()) {
                profile_name = args[++i];
            } else if (args[i] == "--verbose") {
                verbose = true;
            }
        }
        
        // If profile specified, adjust config file name
        if (!profile_name.empty()) {
            config_file = profile_name + "_lighthouse_config.json";
        }
        
        // Create configuration manager
        UltimateConfig::UltimateConfigManager config_manager(config_file);
        
        // Execute command
        std::string command = args[0];
        
        if (command == "create") {
            std::cout << "üìù Creating default configuration...\n";
            if (config_manager.loadConfiguration()) {
                std::cout << "‚úÖ Default configuration created successfully!\n";
                config_manager.displayConfigurationSummary();
            } else {
                std::cerr << "‚ùå Failed to create default configuration\n";
                return 1;
            }
            
        } else if (command == "validate") {
            std::cout << "üîç Validating configuration...\n";
            if (config_manager.loadConfiguration()) {
                std::cout << "‚úÖ Configuration is valid!\n";
                if (verbose) {
                    config_manager.displayConfigurationSummary();
                }
            } else {
                std::cerr << "‚ùå Configuration validation failed\n";
                return 1;
            }
            
        } else if (command == "show") {
            std::cout << "üìä Loading and displaying configuration...\n";
            if (config_manager.loadConfiguration()) {
                config_manager.displayConfigurationSummary();
            } else {
                std::cerr << "‚ùå Failed to load configuration\n";
                return 1;
            }
            
        } else if (command == "profile") {
            if (args.size() < 2) {
                std::cerr << "‚ùå Profile name required\n";
                return 1;
            }
            
            std::string new_profile = args[1];
            std::cout << "üé≠ Creating " << new_profile << " profile...\n";
            
            // Load base configuration first
            if (config_manager.loadConfiguration()) {
                if (config_manager.createProfile(new_profile)) {
                    std::cout << "‚úÖ Profile created successfully!\n";
                } else {
                    std::cerr << "‚ùå Failed to create profile\n";
                    return 1;
                }
            } else {
                std::cerr << "‚ùå Failed to load base configuration\n";
                return 1;
            }
            
        } else if (command == "reload") {
            std::cout << "üîÑ Testing hot-reload functionality...\n";
            
            if (config_manager.loadConfiguration()) {
                std::cout << "‚úÖ Initial configuration loaded\n";
                
                std::cout << "üìù Modify the configuration file and press Enter to test reload...\n";
                std::cin.get();
                
                if (config_manager.checkForUpdatesAndReload()) {
                    std::cout << "‚úÖ Configuration reloaded successfully!\n";
                    config_manager.displayConfigurationSummary();
                } else {
                    std::cout << "‚ÑπÔ∏è  No changes detected or reload failed\n";
                }
            } else {
                std::cerr << "‚ùå Failed to load initial configuration\n";
                return 1;
            }
            
        } else {
            std::cerr << "‚ùå Unknown command: " << command << "\n";
            std::cerr << "Use 'help' for available commands\n";
            return 1;
        }
        
    } catch (const std::exception& e) {
        std::cerr << "üö® Fatal Error: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}
